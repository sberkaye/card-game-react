[{"C:\\Users\\Berkay\\Desktop\\card-game-react\\src\\index.js":"1","C:\\Users\\Berkay\\Desktop\\card-game-react\\src\\components\\App.jsx":"2","C:\\Users\\Berkay\\Desktop\\card-game-react\\src\\redux\\reducers\\index.js":"3","C:\\Users\\Berkay\\Desktop\\card-game-react\\src\\components\\StartButton.jsx":"4","C:\\Users\\Berkay\\Desktop\\card-game-react\\src\\components\\DifficultyBox.jsx":"5","C:\\Users\\Berkay\\Desktop\\card-game-react\\src\\components\\ThemeSlider.jsx":"6","C:\\Users\\Berkay\\Desktop\\card-game-react\\src\\components\\CardContainer.jsx":"7","C:\\Users\\Berkay\\Desktop\\card-game-react\\src\\redux\\reducers\\themeReducer.js":"8","C:\\Users\\Berkay\\Desktop\\card-game-react\\src\\redux\\actions\\actionTheme.js":"9","C:\\Users\\Berkay\\Desktop\\card-game-react\\src\\components\\Card.jsx":"10","C:\\Users\\Berkay\\Desktop\\card-game-react\\src\\redux\\actions\\types.js":"11","C:\\Users\\Berkay\\Desktop\\card-game-react\\src\\apis\\unsplash.js":"12","C:\\Users\\Berkay\\Desktop\\card-game-react\\src\\credentials.js":"13","C:\\Users\\Berkay\\Desktop\\card-game-react\\src\\redux\\reducers\\difficultyReducer.js":"14","C:\\Users\\Berkay\\Desktop\\card-game-react\\src\\redux\\reducers\\cardDataReducer.js":"15","C:\\Users\\Berkay\\Desktop\\card-game-react\\src\\redux\\actions\\actionCardData.js":"16","C:\\Users\\Berkay\\Desktop\\card-game-react\\src\\redux\\actions\\actionDifficulty.js":"17"},{"size":702,"mtime":1618752657632,"results":"18","hashOfConfig":"19"},{"size":1387,"mtime":1619800148023,"results":"20","hashOfConfig":"19"},{"size":310,"mtime":1619395623299,"results":"21","hashOfConfig":"19"},{"size":3697,"mtime":1619764034577,"results":"22","hashOfConfig":"19"},{"size":1357,"mtime":1619204808998,"results":"23","hashOfConfig":"19"},{"size":2198,"mtime":1618752657623,"results":"24","hashOfConfig":"19"},{"size":4212,"mtime":1619970983476,"results":"25","hashOfConfig":"19"},{"size":366,"mtime":1618752657637,"results":"26","hashOfConfig":"19"},{"size":164,"mtime":1618752657634,"results":"27","hashOfConfig":"19"},{"size":1393,"mtime":1619970991045,"results":"28","hashOfConfig":"19"},{"size":132,"mtime":1619395622533,"results":"29","hashOfConfig":"19"},{"size":193,"mtime":1618752657617,"results":"30","hashOfConfig":"19"},{"size":106,"mtime":1618752657623,"results":"31","hashOfConfig":"19"},{"size":317,"mtime":1619106931278,"results":"32","hashOfConfig":"19"},{"size":306,"mtime":1619121401527,"results":"33","hashOfConfig":"19"},{"size":170,"mtime":1619108919237,"results":"34","hashOfConfig":"19"},{"size":176,"mtime":1619204497113,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"35k2ag",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"C:\\Users\\Berkay\\Desktop\\card-game-react\\src\\index.js",[],["74","75","76","77","78"],"C:\\Users\\Berkay\\Desktop\\card-game-react\\src\\components\\App.jsx",[],"C:\\Users\\Berkay\\Desktop\\card-game-react\\src\\redux\\reducers\\index.js",[],"C:\\Users\\Berkay\\Desktop\\card-game-react\\src\\components\\StartButton.jsx",["79","80","81"],"import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { connect } from \"react-redux\";\nimport cardDataActions from \"../redux/actions/actionCardData\";\nimport unsplash from \"../apis/unsplash\";\nimport animals from \"../img/animals.svg\";\nimport flowers from \"../img/flowers.svg\";\nimport cars from \"../img/cars.svg\";\nimport sports from \"../img/sports.svg\";\n\nconst { setCardData } = cardDataActions;\n\nconst themePics = { animals, flowers, cars, sports };\n\nconst cardWidths = [200, 200, 200, 200];\n\n/**\n * get a number of random items form an array\n * @param {Array} arr an Array containing the items\n * @param {Number} n number of random items\n *\n * @returns {Array} an array containing the randomly selected items\n */\nconst getRandom = (arr, n) => {\n  const result = new Array(n);\n  let { length } = arr;\n  const taken = new Array(length); // an array to keep track of taken indexes\n\n  if (n > length) {\n    throw new RangeError(\"getRandom: more elements taken than available\");\n  }\n\n  // for n times\n  /* eslint-disable no-plusplus, no-param-reassign */\n  while (n--) {\n    const x = Math.floor(Math.random() * length); // get a random index\n    // if that index is already taken, get the number on the index in taken array's x index\n    // if not, get the number on that index\n    result[n] = arr[x in taken ? taken[x] : x];\n    // put length - 1 to the x index of taken array, so that we know that the index\n    // is taken, and if we ever randomly get that index again, we'll get the number\n    // in the length - 1 index of the array\n    taken[x] = --length in taken ? taken[length] : length;\n  }\n\n  return result;\n};\n\nconst StartButton = (props) => {\n  const { difficulty, setStarted, theme } = props;\n  const [random, setRandom] = useState(0);\n  /**\n   * get 2 random pictures from Unsplash API\n   * @returns an object containing 2 different URLs, one for unique picture and one for regular\n   */\n  const getPictures = async () => {\n    const response = await unsplash.get(`/search/photos`, {\n      params: {\n        query: theme,\n      },\n    });\n    const randomPics = getRandom(response.data.results, 2);\n    const uniqueIndex = Math.floor(Math.random() * 2);\n    const regular = uniqueIndex === 0 ? 1 : 0;\n\n    return {\n      unique: randomPics[uniqueIndex],\n      regular: randomPics[regular],\n    };\n  };\n\n  const handleClick = async () => {\n    const pics = await getPictures();\n    setRandom(Math.floor(Math.random() * (difficulty + 2)));\n    console.log(\"difficulty :>> \", difficulty);\n\n    console.log(`pics`, pics);\n    const cardsData = new Array(difficulty + 2).fill({});\n    cardsData.forEach((card, index) => {\n      cardsData[index] = {\n        key: uuidv4(),\n        theme,\n        index,\n        unique: index === random,\n        pic:\n          index === random ? pics.unique.urls.small : pics.regular.urls.small,\n        themePic: themePics[theme],\n        cardWidth: cardWidths[difficulty - 1],\n        rotated: false,\n      };\n    });\n    console.log(`cardsData`, cardsData);\n    props.setCardData(cardsData);\n    setStarted(true);\n  };\n\n  return (\n    <div id=\"start-button\">\n      <button type=\"button\" id=\"start-button__button\" onClick={handleClick}>\n        Start\n      </button>\n    </div>\n  );\n};\n\nStartButton.propTypes = {\n  difficulty: PropTypes.number.isRequired,\n  theme: PropTypes.string.isRequired,\n  setStarted: PropTypes.func.isRequired,\n  setCardData: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    theme: state.theme.selectedTheme,\n    difficulty: state.difficulty.difficulty,\n  };\n};\n\nexport default connect(mapStateToProps, { setCardData })(StartButton);\n","C:\\Users\\Berkay\\Desktop\\card-game-react\\src\\components\\DifficultyBox.jsx",[],"C:\\Users\\Berkay\\Desktop\\card-game-react\\src\\components\\ThemeSlider.jsx",[],"C:\\Users\\Berkay\\Desktop\\card-game-react\\src\\components\\CardContainer.jsx",["82","83"],"/* eslint-disable no-return-assign */\n/* eslint-disable no-nested-ternary */\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { animated, useTransition, useChain, useSpringRef } from \"react-spring\";\nimport PropTypes from \"prop-types\";\nimport { shuffle } from \"lodash\";\nimport Card from \"./Card\";\n\nconst CardContainer = (props) => {\n  const { started, cards, difficulty, setStarted } = props;\n  const [finished, setFinished] = useState(false);\n  const [success, setSuccess] = useState(\"\");\n  const [ownCards, setCards] = useState(cards);\n\n  // rotate the card that is clicked after the click, and after a second\n  // rotate every other card\n  const handleClick = (index) => () => {\n    setCards(\n      ownCards.map((card, cardIndex) => {\n        if (index === cardIndex) {\n          return {\n            ...card,\n            rotated: false,\n          };\n        }\n        return card;\n      })\n    );\n    setTimeout(() => {\n      setCards(ownCards.map((card) => ({ ...card, rotated: false })));\n    }, 1000);\n    if (ownCards[index].unique) {\n      setSuccess(\"success\");\n      console.log(\"success\");\n    } else {\n      setSuccess(\"fail\");\n      console.log(\"fail\");\n    }\n    setTimeout(() => setStarted(false), 2000);\n  };\n\n  const resultRef = useSpringRef();\n  const resultTransition = useTransition(success, {\n    from: { opacity: 0, y: 1000, transform: \"scale(0)\" },\n    enter: { opacity: 1, y: 0, transform: \"scale(1)\" },\n    leave: { opacity: 0 },\n    config: { duration: 1000 },\n    delay: 1000,\n    ref: resultRef,\n  });\n\n  // transition object, use widths of the cards to determine their x positions\n  const cardsRef = useSpringRef();\n  let width = 0;\n  const cardTransitions = useTransition(\n    ownCards.map((card, index) => {\n      width += card.cardWidth;\n      return {\n        ...card,\n        x:\n          200 / difficulty +\n          width -\n          card.cardWidth +\n          (index * 100) / (difficulty * 2),\n      };\n    }),\n    {\n      key: (card) => card.key,\n      from: { width: 0, opacity: 0 },\n      leave: { width: 0, opacity: 0 },\n      enter: ({ x, cardWidth }) => ({ x, width: cardWidth, opacity: 1 }),\n      update: ({ x, cardWidth }) => ({ x, width: cardWidth }),\n      ref: cardsRef,\n    }\n  );\n\n  useChain([cardsRef, resultRef], [0, difficulty + 7]);\n  // rotate each card after the start and shuffle them\n  useEffect(() => {\n    setTimeout(() => {\n      setCards(ownCards.map((card) => ({ ...card, rotated: true })));\n    }, 2000);\n    for (let i = 0; i < difficulty + 1; i += 1) {\n      setTimeout(() => {\n        setCards(shuffle(ownCards.map((card) => ({ ...card, rotated: true }))));\n      }, (i + 3) * 1000);\n    }\n    setTimeout(() => setFinished(true), (difficulty + 4) * 1000);\n  }, [started]);\n\n  return (\n    <>\n      {cardTransitions((style, card, t, index) => {\n        return (\n          <Card\n            style={style}\n            data={card}\n            length={cards.length}\n            handleClick={handleClick(index)}\n            rotated={card.rotated}\n            finished={finished}\n          />\n        );\n      })}\n      {resultTransition((style, status) =>\n        status.length ? (\n          status === \"success\" ? (\n            <animated.div\n              style={style}\n              className=\"result-text result-text--success\"\n            >\n              SUCCESS\n            </animated.div>\n          ) : (\n            <animated.div\n              style={style}\n              className=\"result-text result-text--fail\"\n            >\n              FAIL\n            </animated.div>\n          )\n        ) : (\n          <></>\n        )\n      )}\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    cards: state.cardData.cards,\n    difficulty: state.difficulty.difficulty,\n  };\n};\n\nCardContainer.propTypes = {\n  difficulty: PropTypes.number.isRequired,\n  cards: PropTypes.arrayOf(\n    PropTypes.shape({\n      theme: PropTypes.string,\n      unique: PropTypes.bool,\n      pic: PropTypes.string,\n      themePic: PropTypes.string,\n    })\n  ).isRequired,\n  started: PropTypes.bool.isRequired,\n  setStarted: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps)(CardContainer);\n","C:\\Users\\Berkay\\Desktop\\card-game-react\\src\\redux\\reducers\\themeReducer.js",[],"C:\\Users\\Berkay\\Desktop\\card-game-react\\src\\redux\\actions\\actionTheme.js",[],"C:\\Users\\Berkay\\Desktop\\card-game-react\\src\\components\\Card.jsx",[],"C:\\Users\\Berkay\\Desktop\\card-game-react\\src\\redux\\actions\\types.js",[],"C:\\Users\\Berkay\\Desktop\\card-game-react\\src\\apis\\unsplash.js",[],"C:\\Users\\Berkay\\Desktop\\card-game-react\\src\\credentials.js",[],["84","85","86","87","88"],"C:\\Users\\Berkay\\Desktop\\card-game-react\\src\\redux\\reducers\\difficultyReducer.js",[],"C:\\Users\\Berkay\\Desktop\\card-game-react\\src\\redux\\reducers\\cardDataReducer.js",[],"C:\\Users\\Berkay\\Desktop\\card-game-react\\src\\redux\\actions\\actionCardData.js",[],"C:\\Users\\Berkay\\Desktop\\card-game-react\\src\\redux\\actions\\actionDifficulty.js",[],{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","severity":1,"message":"100","line":76,"column":5,"nodeType":"101","messageId":"102","endLine":76,"endColumn":16},{"ruleId":"99","severity":1,"message":"100","line":78,"column":5,"nodeType":"101","messageId":"102","endLine":78,"endColumn":16},{"ruleId":"99","severity":1,"message":"100","line":93,"column":5,"nodeType":"101","messageId":"102","endLine":93,"endColumn":16},{"ruleId":"99","severity":1,"message":"100","line":35,"column":7,"nodeType":"101","messageId":"102","endLine":35,"endColumn":18},{"ruleId":"99","severity":1,"message":"100","line":38,"column":7,"nodeType":"101","messageId":"102","endLine":38,"endColumn":18},{"ruleId":"89","replacedBy":"103"},{"ruleId":"91","replacedBy":"104"},{"ruleId":"93","replacedBy":"105"},{"ruleId":"95","replacedBy":"106"},{"ruleId":"97","replacedBy":"107"},"lines-around-directive",["108"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-console","Unexpected console statement.","MemberExpression","unexpected",["108"],[],[],[],[],"padding-line-between-statements"]